library("ggvis")
library("magrittr")
mtcars %>%
ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
library("ggvis")
library("magrittr")
mtcars %>%
ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
library(dplyr)
mtcars %>%
ggvis(x = ~mpg, y = ~disp) %>%
mutate(disp = disp / 61.0237) %>% # convert engine displacment to litres
layer_points()
library(dplyr)
mtcars %>%
ggvis(x = ~mpg, y = ~disp) %>%
mutate(disp = disp / 61.0237) %>% # convert engine displacment to litres
layer_points()
mtcars
??stroke
??ggvis
mtcars %>%
ggvis(~wt, ~mpg, fill := "red", stroke := "black") %>%
layer_points()
n <- 1000
m <- 50
e <- 0.05
s <- cumsum(2*(rbinom(n, size=1, prob=0.5) - 0.5))
head(s)
s
n <- 1000
m <- 50
e <- 0.05
i = seq.int(1, n, 1)
s <- cumsum(2*(rbinom(n, size=1, prob=0.5) - 0.5))
s
s
s
?sweep
n <- 1000
m <- 50
e <- 0.05
i = seq.int(1, n, 1)
s <- cumsum(2*(rbinom(n, size=1, prob=0.5) - 0.5))
x_estimate = sweep(s, 2, i, `/`)
n_max <- 1000
m <- 50
e <- 0.05
n = seq.int(1, n_max, 1)
s <- cumsum(2*(rbinom(n_max, size=1, prob=0.5) - 0.5))
s
demo(plotmath)
demo(plotmath)
n_max <- 1000
m <- 50
e <- 0.05
n = seq.int(1, n_max, 1)
s <- cumsum(2*(rbinom(n_max, size=1, prob=0.5) - 0.5))
x_estimate <- s/n
x_estimate
x <- seq.int(1, 10, 1)
x
y <- seq.int(1,1,0)
y
?seq.int
y <- seq.int(1,1,length.out=10)
y
y <- seq.int(2,1,length.out=10)
y
y <- seq.int(2,2,length.out=10)
y
x
y/x
x/y
?matrix
2*(rbinom(n_max*m, size=1, prob=0.5) - 0.5)
matrix(2*(rbinom(2*3, size=1, prob=0.5) - 0.5), ncol = 3)
?apply
?seq_along
?matplot
x <- matrix(2*(rbinom(n_max*m, size=1, prob=0.5) - 0.5), ncol = m)
y <- apply(x, 2, function(z) cumsum(z)/seq_along(z))
n <- seq.int(1, n_max, 1)
data <- data.frame(y, n)
data
m<-3
n_max<-2
x <- matrix(2*(rbinom(n_max*m, size=1, prob=0.5) - 0.5), ncol = m)
y <- apply(x, 2, function(z) cumsum(z)/seq_along(z))
n <- seq.int(1, n_max, 1)
data <- data.frame(y, n)
data
n_max<-10
x <- matrix(2*(rbinom(n_max*m, size=1, prob=0.5) - 0.5), ncol = m)
y <- apply(x, 2, function(z) cumsum(z)/seq_along(z))
n <- seq.int(1, n_max, 1)
data <- data.frame(y, n)
data
data[: 1]
data[:,1]
data[[:,1]]
data[,c[1]]
data[,c(2)
]
?ggvis
v <- layer_lines(v, data = data, x = ~n, y = ~x_estimate(2))
v
data
data[,c(0)]
data[,c(1)]
?apply
?layer_paths
data <- data.frame(x_estimate, n)
m<-3
?ggplot
?aes
```{R}
m <- 10
n_max <- 1000
n <- seq.int(1, n_max, 1)
s <- matrix(2*(rbinom(n_max*m, size=1, prob=0.5) - 0.5), ncol = m)
x_estimate <- apply(s, 2, function(z) cumsum(z)/seq_along(z))
data <- data.frame(x_estimate, n)
v <- data %>%
ggvis(x = ~n, y = ~x_estimate[,c(1)]) %>%
layer_lines() %>%
scale_numeric("y", domain = c(-0.5, 0.5), nice = FALSE, clamp = TRUE)
k <- 1
repeat {
k <- k+1;
if (k>=m) break;
v <- (v %>% layer_paths(x = ~n, y = ~x_estimate[,c(k)]))
}
v
```
library(knitr)
library(ggvis)
library(ggplot2)
library(shiny)
library(dplyr)
library(magrittr)
m <- 10
n_max <- 1000
n <- seq.int(1, n_max, 1)
s <- matrix(2*(rbinom(n_max*m, size=1, prob=0.5) - 0.5), ncol = m)
x_estimate <- apply(s, 2, function(z) cumsum(z)/seq_along(z))
data <- data.frame(x_estimate, n)
v <- data %>%
ggvis(x = ~n, y = ~x_estimate[,c(1)]) %>%
layer_lines() %>%
scale_numeric("y", domain = c(-0.5, 0.5), nice = FALSE, clamp = TRUE)
k <- 1
repeat {
k <- k+1;
if (k>=m) break;
v <- (v %>% layer_paths(x = ~n, y = ~x_estimate[,c(k)]))
}
v
m <- 10
n_max <- 1000
n <- seq.int(1, n_max, 1)
s <- matrix(2*(rbinom(n_max*m, size=1, prob=0.5) - 0.5), ncol = m)
x_estimate <- apply(s, 2, function(z) cumsum(z)/seq_along(z))
data <- data.frame(x_estimate, n)
v <- data %>%
ggvis(x = ~n, y = ~x_estimate[,c(1)]) %>%
layer_lines() %>%
scale_numeric("y", domain = c(-0.5, 0.5), nice = FALSE, clamp = TRUE)
for ( i in 2:m) {
v <- (v %>% layer_paths(x = ~n, y = ~x_estimate[,c(i)]))
}
v
?as.name
?layer_paths
?prop
